{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["scopes","apiUrl","baseSea","App","useState","connected","setConnected","tState","setTState","tx","setTx","useEffect","window","location","pathname","includes","fetch","search","then","r","json","d","localStorage","setItem","access_token","getItem","wallet","ethers","createRandom","address","provider","InfuraProvider","iface","Interface","ContractABI","abi","filter","networks","topics","id","on","e","log","parseLog","tokenId","args","_recipient","parseInt","_tokenId","toString","className","onClick","open","encodeURIComponent","status","style","textAlign","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAIIA,EAAS,gCAEPC,EAAS,oDAuFf,IAAMC,EAAU,iFACDC,EArFf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGOJ,mBAAS,MAHhB,mBAGNK,EAHM,KAGFC,EAHE,KAIXC,qBAAU,WAQN,GAPIC,OAAOC,SAASC,SAASC,SAAS,aAClCC,MAAMf,EAAO,WAAaW,OAAOC,SAASI,QACrCC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAAAG,GAAMC,aAAaC,QAAQ,eAAgBF,EAAEG,cAAelB,GAAa,OAGvEgB,aAAaG,QAAQ,cACvB,CACV,IAAMC,EAASC,IAAcC,eAC7BN,aAAaC,QAAQ,aAAcG,EAAOG,SAG1C,IAAIC,EAAW,IAAIH,IAAiBI,eAAe,WAC3DC,EAAQ,IAAIL,IAAaM,UAAUC,EAAYC,KAE1CC,EAAS,CACZP,QAASK,EAAYG,SAAS,GAAGR,QACjCS,OAAQ,CAEJX,IAAaY,GAAG,mCAGxBT,EAASU,GAAGJ,GAAQ,SAACK,GACpB,IAAMC,EAAMV,EAAMW,SAASF,GAErBG,GADYF,EAAIG,KAAKC,WACXC,SAASL,EAAIG,KAAKG,SAASC,aAC3CvC,EAAM,CAACkC,iBAKH,IAEH,IAAMf,EAAUP,aAAaG,QAAQ,cACrC,OACI,sBAAKyB,UAAU,MAAf,UACE,sBAAKA,UAAU,cAAf,2BAA4CrB,KAC5C,qBAAKqB,UAAU,UAAf,SACE,sBAAKA,UAAU,OAAf,UACF,qBAAKA,UAAU,MAAf,SACI7C,EAAwE,sBAA5D,6DAEdA,GAAa,qBAAK6C,UAAU,cAAf,SACb,wBACIC,QAAS,kBACLvC,OAAOwC,KACH,8GAKsBC,mBAAmBrD,GAErC,iBACAqD,mBA/DoE,+CAoDpF,uBAiBAhD,GAAc,qBAAK6C,UAAU,cAAf,SACd,wBAAQC,QAAS,WACf3C,EAAU,cACVQ,MAAMf,EAAQ,0BAA0BqB,aAAaG,QAAQ,gBAAgB,eAAeH,aAAaG,QAAQ,eAAeP,MAAK,SAAAC,GAClH,MAAbA,EAAEmC,QACJ9C,EAAU,4DAJhB,SAOKD,GAAS,uBAEd,qBAAKgD,MAAO,CAACC,UAAU,UAAvB,SACG/C,GACC,mBAAGgD,KAAI,UAAKvD,GAAL,OAAeO,EAAGmC,SAAzB,+BCxEDc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.6954049a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as ethers from \"ethers\";\nimport ContractABI from \"./contracts/ArtistAmbassadors.json\"\nvar scopes = \"user-top-read user-read-email\";\nvar redirect_uri = process.env.NODE_ENV === \"development\" ? \"http://localhost:3000/#callback\" : \"https://ambassador.raptor.pizza/#callback\";\nconst apiUrl = \"https://artist-ambassador-i3w4qwywla-uc.a.run.app\"\nconst clientId = \"37647f33e70444dbb1c57863e099938d\";\n\nfunction App() {\n  const [connected, setConnected] = useState(false)\n  const [tState, setTState] = useState(\"\")\n  const [tx, setTx] = useState(null) as any\n    useEffect(() => {\n        if (window.location.pathname.includes(\"callback\")) {\n            fetch(apiUrl+\"/spotify\" + window.location.search)\n                .then((r) => r.json())\n                .then(d => {localStorage.setItem(\"access_token\", d.access_token); setConnected(true)});\n        }\n\n        const storage = localStorage.getItem(\"public_key\");\n        if (!storage) {\n            const wallet = ethers.Wallet.createRandom();\n            localStorage.setItem(\"public_key\", wallet.address);\n        }\n\n            let provider = new ethers.providers.InfuraProvider(\"rinkeby\");\nlet iface = new ethers.utils.Interface(ContractABI.abi)\n\n   const filter = {\n      address: ContractABI.networks[4].address,\n      topics: [\n          // the name of the event, parnetheses containing the data type of each event, no spaces\n          ethers.utils.id(\"ArtistMinted(address,uint256)\")\n      ]\n  }\n  provider.on(filter, (e) => {\n   const log = iface.parseLog(e)\n   const recipient = log.args._recipient;\n   const tokenId = parseInt(log.args._tokenId.toString())\n   setTx({tokenId})\n      // do whatever you want here\n      // I'm pretty sure this returns a promise, so don't forget to resolve it\n  })\n\n    }, []);\n\n    const address = localStorage.getItem(\"public_key\")\n    return (\n        <div className=\"App\">\n          <div className=\"row address\">your address: {address}</div>\n          <div className=\"content\">\n            <div className=\"wrap\">\n          <div className=\"row\">\n            {!connected ? \"connect your spotify & we'll see what artist you get :)\" : \"ok it's minty time!\"}\n          </div>\n          {!connected && <div className=\"button-wrap\">\n            <button\n                onClick={() =>\n                    window.open(\n                        \"https://accounts.spotify.com/authorize\" +\n                            \"?response_type=code\" +\n                            \"&client_id=\" +\n                            clientId +\n                            (scopes\n                                ? \"&scope=\" + encodeURIComponent(scopes)\n                                : \"\") +\n                            \"&redirect_uri=\" +\n                            encodeURIComponent(redirect_uri)\n                    )\n                }\n            >\n                connect\n            </button></div>}\n           {connected &&  <div className=\"button-wrap\">\n            <button onClick={() => {\n              setTState(\"minting...\")\n              fetch(apiUrl +\"/redirect?access_token=\"+localStorage.getItem(\"access_token\")+\"&public_key=\"+localStorage.getItem(\"public_key\")).then(r => {\n                if (r.status === 200) {\n                  setTState(\"it's going through the chain! one sec... or a few...\")\n                }\n              })\n            }}>{!tState ? \"let's goooo\" : tState}</button></div>}\n            </div></div>\n            <div style={{textAlign:\"center\"}}>\n              {tx && (\n                <a href={`${baseSea}${tx.tokenId}`}>on the sea!</a>\n                // <a href={`${baseSea}1`}>on the sea!</a>\n              )}\n            </div>\n        </div>\n    );\n}\nconst baseSea = \"https://testnets.opensea.io/assets/0x9c5ff11dbe7174a56a6a4c84b677e2df9f0bdd26/\"\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}