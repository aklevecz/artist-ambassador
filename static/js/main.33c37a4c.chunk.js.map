{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["scopes","apiUrl","baseSea","App","useState","connected","setConnected","tState","setTState","artist","setArtist","tx","setTx","useEffect","window","location","search","includes","fetch","then","r","json","d","console","log","localStorage","setItem","access_token","getItem","wallet","ethers","createRandom","address","provider","InfuraProvider","iface","Interface","ContractABI","abi","filter","networks","topics","id","on","e","parseLog","tokenId","args","_recipient","parseInt","_tokenId","toString","className","onClick","open","encodeURIComponent","status","img","name","style","color","src","textAlign","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAIIA,EAAS,gCAKPC,EAAiD,oDAqIvD,IAAMC,EACF,iFACWC,EApIf,WAAgB,IAAD,EACuBC,oBAAS,GADhC,mBACJC,EADI,KACOC,EADP,OAEiBF,mBAAS,IAF1B,mBAEJG,EAFI,KAEIC,EAFJ,OAGiBJ,mBAAS,MAH1B,mBAGJK,EAHI,KAGIC,EAHJ,OAISN,mBAAS,MAJlB,mBAIJO,EAJI,KAIAC,EAJA,KAKXC,qBAAU,WAYN,GAXIC,OAAOC,SAASC,OAAOC,SAAS,SAChCC,MAAMjB,EAAS,WAAaa,OAAOC,SAASC,QACvCG,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAACG,GACHC,QAAQC,IAAIF,GACZG,aAAaC,QAAQ,eAAgBJ,EAAEK,cACvCrB,GAAa,OAITmB,aAAaG,QAAQ,cACvB,CACV,IAAMC,EAASC,IAAcC,eAC7BN,aAAaC,QAAQ,aAAcG,EAAOG,SAG9C,IAAIC,EAAW,IAAIH,IAAiBI,eAAe,WAC/CC,EAAQ,IAAIL,IAAaM,UAAUC,EAAYC,KAE7CC,EAAS,CACXP,QAASK,EAAYG,SAAS,GAAGR,QACjCS,OAAQ,CAEJX,IAAaY,GAAG,mCAGxBT,EAASU,GAAGJ,GAAQ,SAACK,GACjB,IAAMpB,EAAMW,EAAMU,SAASD,GAErBE,GADYtB,EAAIuB,KAAKC,WACXC,SAASzB,EAAIuB,KAAKG,SAASC,aAC3CvC,EAAM,CAAEkC,iBAIb,IAEH,IAAMd,EAAUP,aAAaG,QAAQ,cACrC,OACI,sBAAKwB,UAAU,MAAf,UACI,sBAAKA,UAAU,cAAf,2BAA4CpB,KAC5C,sBAAKoB,UAAU,UAAf,WACMzC,GACE,sBAAKyC,UAAU,OAAf,UACI,qBAAKA,UAAU,MAAf,SACM/C,EAEI,sBADA,6DAGRA,GACE,qBAAK+C,UAAU,cAAf,SACI,wBACIC,QAAS,kBACLvC,OAAOwC,KACH,8GAMUC,mBAAmBvD,GAEzB,iBACAuD,mBAxEtC,sCA4DsB,uBAoBPlD,GACG,qBAAK+C,UAAU,cAAf,SACI,wBACIC,QAAS,WACL7C,EAAU,cACVU,MACIjB,EACI,0BACAwB,aAAaG,QACT,gBAEJ,eACAH,aAAaG,QACT,eAEVT,MAAK,SAACC,GACJ,GAAiB,MAAbA,EAAEoC,OAIF,OAHAhD,EACI,wDAEGY,EAAEC,OAETE,QAAQC,IAAIJ,MAEjBD,MAAK,SAACG,GACP,IAAMmC,EAAMnC,EAAEmC,IACRC,EAAOpC,EAAEb,OACfC,EAAU,CAAC+C,MAAKC,aAzB1B,SA6BMnD,GAAS,qBAM9BI,GAED,gCACE,8DAClB,qBAAKgD,MAAO,CAACC,MAAM,OAAnB,SAA4BnD,EAAOiD,OACnC,qBAAKG,IAAKpD,EAAOgD,YAGL,qBAAKE,MAAO,CAAEG,UAAW,UAAzB,SACKnD,GACG,mBAAGoD,KAAI,UAAK7D,GAAL,OAAeS,EAAGmC,SAAzB,+BCzHLkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB/C,MAAK,YAAkD,IAA/CgD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.33c37a4c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as ethers from \"ethers\";\nimport ContractABI from \"./contracts/ArtistAmbassadors.json\";\nvar scopes = \"user-top-read user-read-email\";\nvar redirect_uri =\n    process.env.NODE_ENV === \"development\"\n        ? \"http://localhost:3000/\"\n        : \"https://ambassador.raptor.pizza/\";\nconst apiUrl = process.env.NODE_ENV === \"production\" ? \"https://artist-ambassador-i3w4qwywla-uc.a.run.app\" : \"http://localhost:8082\";\nconst clientId = \"37647f33e70444dbb1c57863e099938d\";\n\nfunction App() {\n    const [connected, setConnected] = useState(false);\n    const [tState, setTState] = useState(\"\");\n    const [artist, setArtist] = useState(null) as any\n    const [tx, setTx] = useState(null) as any;\n    useEffect(() => {\n        if (window.location.search.includes(\"code\")) {\n            fetch(apiUrl + \"/spotify\" + window.location.search)\n                .then((r) => r.json())\n                .then((d) => {\n                    console.log(d);\n                    localStorage.setItem(\"access_token\", d.access_token);\n                    setConnected(true);\n                });\n        }\n\n        const storage = localStorage.getItem(\"public_key\");\n        if (!storage) {\n            const wallet = ethers.Wallet.createRandom();\n            localStorage.setItem(\"public_key\", wallet.address);\n        }\n\n        let provider = new ethers.providers.InfuraProvider(\"rinkeby\");\n        let iface = new ethers.utils.Interface(ContractABI.abi);\n\n        const filter = {\n            address: ContractABI.networks[4].address,\n            topics: [\n                // the name of the event, parnetheses containing the data type of each event, no spaces\n                ethers.utils.id(\"ArtistMinted(address,uint256)\"),\n            ],\n        };\n        provider.on(filter, (e) => {\n            const log = iface.parseLog(e);\n            const recipient = log.args._recipient;\n            const tokenId = parseInt(log.args._tokenId.toString());\n            setTx({ tokenId });\n            // do whatever you want here\n            // I'm pretty sure this returns a promise, so don't forget to resolve it\n        });\n    }, []);\n\n    const address = localStorage.getItem(\"public_key\");\n    return (\n        <div className=\"App\">\n            <div className=\"row address\">your address: {address}</div>\n            <div className=\"content\">\n                {!tx && (\n                    <div className=\"wrap\">\n                        <div className=\"row\">\n                            {!connected\n                                ? \"connect your spotify & we'll see what artist you get :)\"\n                                : \"ok it's minty time!\"}\n                        </div>\n                        {!connected && (\n                            <div className=\"button-wrap\">\n                                <button\n                                    onClick={() =>\n                                        window.open(\n                                            \"https://accounts.spotify.com/authorize\" +\n                                                \"?response_type=code\" +\n                                                \"&client_id=\" +\n                                                clientId +\n                                                (scopes\n                                                    ? \"&scope=\" +\n                                                      encodeURIComponent(scopes)\n                                                    : \"\") +\n                                                \"&redirect_uri=\" +\n                                                encodeURIComponent(redirect_uri)\n                                        )\n                                    }\n                                >\n                                    connect\n                                </button>\n                            </div>\n                        )}\n                        {connected && (\n                            <div className=\"button-wrap\">\n                                <button\n                                    onClick={() => {\n                                        setTState(\"minting...\");\n                                        fetch(\n                                            apiUrl +\n                                                \"/redirect?access_token=\" +\n                                                localStorage.getItem(\n                                                    \"access_token\"\n                                                ) +\n                                                \"&public_key=\" +\n                                                localStorage.getItem(\n                                                    \"public_key\"\n                                                )\n                                        ).then((r) => {\n                                            if (r.status === 200) {\n                                                setTState(\n                                                    \"it's going through the chain! one sec... or a few...\"\n                                                );\n                                                return r.json()\n                                            } else {\n                                                console.log(r);\n                                            }\n                                        }).then((d : any) => {\n                                          const img = d.img;\n                                          const name = d.artist\n                                          setArtist({img, name})\n                                        });\n                                    }}\n                                >\n                                    {!tState ? \"let's goooo\" : tState}\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                )}\n                {tx && (\n                \n                <div>\n                  <div>you are the ambassador for:</div>\n<div style={{color:\"red\"}}>{artist.name}</div>\n<img src={artist.img}></img>\n                </div>)}\n            </div>\n            <div style={{ textAlign: \"center\" }}>\n                {tx && (\n                    <a href={`${baseSea}${tx.tokenId}`}>on the sea!</a>\n                    // <a href={`${baseSea}1`}>on the sea!</a>\n                )}\n            </div>\n        </div>\n    );\n}\nconst baseSea =\n    \"https://testnets.opensea.io/assets/0x9c5ff11dbe7174a56a6a4c84b677e2df9f0bdd26/\";\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}